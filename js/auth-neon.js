/**
 * Sistema de Autentica√ß√£o - Neon + Netlify
 * Sistema Bar Restaurante Maria Flor
 */

class AuthSystemNeon {
    constructor() {
        this.currentUser = null;
        this.token = null;
        this.apiUrl = '/.netlify/functions/server';
        this.init();
    }

    init() {
        // Verificar se j√° existe login salvo
        const savedToken = localStorage.getItem('authToken');
        const savedUser = localStorage.getItem('currentUser');
        
        if (savedToken && savedUser) {
            try {
                this.token = savedToken;
                this.currentUser = JSON.parse(savedUser);
                console.log('‚úÖ Sess√£o restaurada:', this.currentUser.nome);
            } catch (error) {
                console.warn('‚ö†Ô∏è Erro ao restaurar sess√£o:', error);
                this.logout();
            }
        }
    }

    // Fazer login
    async login(email, senha) {
        try {
            console.log('üîÑ Tentando login:', email);
            console.log('üîó URL da API:', `${this.apiUrl}/auth/login`);
            
            const response = await fetch(`${this.apiUrl}/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email, senha })
            });

            console.log('üì° Response status:', response.status);
            
            const data = await response.json();
            console.log('üìÑ Response data:', data);

            if (data.success) {
                this.currentUser = data.user;
                this.token = 'user-logged-in'; // Token simples para demo
                
                // Salvar no localStorage
                localStorage.setItem('authToken', this.token);
                localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
                
                console.log('‚úÖ Login realizado:', this.currentUser.nome);
                console.log('üë§ Usu√°rio logado:', this.currentUser);
                return { success: true, user: this.currentUser };
            } else {
                console.error('‚ùå Erro no login:', data.message);
                return { success: false, message: data.message };
            }
        } catch (error) {
            console.error('‚ùå Erro na requisi√ß√£o:', error);
            return { 
                success: false, 
                message: 'Erro de conex√£o com o servidor' 
            };
        }
    }

    // Fazer logout
    logout() {
        this.currentUser = null;
        this.token = null;
        
        localStorage.removeItem('authToken');
        localStorage.removeItem('currentUser');
        
        console.log('‚úÖ Logout realizado');
        
        // Redirecionar para login se n√£o estiver na p√°gina de login
        if (!window.location.pathname.includes('index.html') && 
            window.location.pathname !== '/') {
            window.location.href = '/index.html';
        }
    }

    // Verificar se est√° logado
    isAuthenticated() {
        return this.token !== null && this.currentUser !== null;
    }

    // Obter usu√°rio atual
    getCurrentUser() {
        return this.currentUser;
    }

    // Verificar permiss√£o por role
    hasRole(role) {
        if (!this.currentUser) return false;
        
        if (this.currentUser.role === 'administrador' || this.currentUser.role === 'admin') return true; // Admin tem acesso a tudo
        
        return this.currentUser.role === role;
    }

    // Verificar se √© admin
    isAdmin() {
        return this.hasRole('administrador') || this.hasRole('admin');
    }

    // Verificar se √© gerente
    isGerente() {
        return this.hasRole('gerente') || this.isAdmin();
    }

    // Obter dados do dashboard
    async getDashboardData() {
        try {
            const response = await fetch(`${this.apiUrl}/dashboard`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`
                }
            });

            const data = await response.json();

            if (data.success) {
                return data.data;
            } else {
                console.error('‚ùå Erro ao obter dados:', data.message);
                return null;
            }
        } catch (error) {
            console.error('‚ùå Erro na requisi√ß√£o:', error);
            return null;
        }
    }

    // Testar conex√£o com API
    async testConnection() {
        try {
            const response = await fetch(`${this.apiUrl}/test`);
            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ Conex√£o com API OK:', data.timestamp);
                return true;
            } else {
                console.error('‚ùå Erro na conex√£o:', data.message);
                return false;
            }
        } catch (error) {
            console.error('‚ùå Erro ao testar conex√£o:', error);
            return false;
        }
    }
}

// Inst√¢ncia global do sistema de autentica√ß√£o
const auth = new AuthSystemNeon();

// Middleware para proteger p√°ginas
function requireAuth() {
    if (!auth.isAuthenticated()) {
        console.warn('‚ö†Ô∏è Acesso negado - usu√°rio n√£o autenticado');
        window.location.href = '/index.html';
        return false;
    }
    return true;
}

// Middleware para proteger rotas de admin
function requireAdmin() {
    if (!auth.isAuthenticated() || !auth.isAdmin()) {
        console.warn('‚ö†Ô∏è Acesso negado - permiss√£o de admin necess√°ria');
        alert('Acesso negado. Voc√™ precisa ser administrador.');
        return false;
    }
    return true;
}

// Middleware para proteger rotas de gerente
function requireGerente() {
    if (!auth.isAuthenticated() || !auth.isGerente()) {
        console.warn('‚ö†Ô∏è Acesso negado - permiss√£o de gerente necess√°ria');
        alert('Acesso negado. Voc√™ precisa ser gerente ou administrador.');
        return false;
    }
    return true;
}

// Fun√ß√£o para atualizar UI baseada no usu√°rio
function updateUserInterface() {
    if (auth.isAuthenticated()) {
        const user = auth.getCurrentUser();
        
        // Atualizar nome do usu√°rio na interface
        const userNameElements = document.querySelectorAll('[data-user-name]');
        userNameElements.forEach(element => {
            element.textContent = user.nome;
        });

        // Atualizar role do usu√°rio
        const userRoleElements = document.querySelectorAll('[data-user-role]');
        userRoleElements.forEach(element => {
            element.textContent = user.role === 'admin' ? 'Administrador' : 
                                  user.role === 'gerente' ? 'Gerente' : 'Funcion√°rio';
        });

        // Mostrar/esconder elementos baseado na role
        const adminElements = document.querySelectorAll('[data-admin-only]');
        adminElements.forEach(element => {
            element.style.display = auth.isAdmin() ? 'block' : 'none';
        });

        const gerenteElements = document.querySelectorAll('[data-gerente-only]');
        gerenteElements.forEach(element => {
            element.style.display = auth.isGerente() ? 'block' : 'none';
        });
    }
}

// Inicializar quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    updateUserInterface();
    
    // Testar conex√£o com API (s√≥ no dashboard)
    if (window.location.pathname.includes('dashboard.html')) {
        auth.testConnection();
    }
});

console.log('üîê Sistema de autentica√ß√£o Neon carregado');